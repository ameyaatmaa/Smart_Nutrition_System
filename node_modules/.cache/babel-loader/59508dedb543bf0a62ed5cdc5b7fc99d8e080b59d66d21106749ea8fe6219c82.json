{"ast":null,"code":"// Calculate BMI (Body Mass Index)\nexport const calculateBMI = (weight, height) => {\n  const heightInMeters = height / 100;\n  const bmi = weight / (heightInMeters * heightInMeters);\n  return Math.round(bmi * 10) / 10;\n};\n\n// Get BMI category\nexport const getBMICategory = bmi => {\n  if (bmi < 18.5) return {\n    category: 'Underweight',\n    color: 'text-blue-400'\n  };\n  if (bmi < 25) return {\n    category: 'Normal weight',\n    color: 'text-green-400'\n  };\n  if (bmi < 30) return {\n    category: 'Overweight',\n    color: 'text-yellow-400'\n  };\n  return {\n    category: 'Obese',\n    color: 'text-red-400'\n  };\n};\n\n// Calculate BMR (Basal Metabolic Rate) using Mifflin-St Jeor Equation\nexport const calculateBMR = (weight, height, age, gender) => {\n  let bmr;\n  if (gender === 'male') {\n    bmr = 10 * weight + 6.25 * height - 5 * age + 5;\n  } else {\n    bmr = 10 * weight + 6.25 * height - 5 * age - 161;\n  }\n  return Math.round(bmr);\n};\n\n// Activity level multipliers\nconst activityMultipliers = {\n  sedentary: 1.2,\n  // Little or no exercise\n  lightly: 1.375,\n  // Light exercise/sports 1-3 days/week\n  moderate: 1.55,\n  // Moderate exercise/sports 3-5 days/week\n  active: 1.725,\n  // Hard exercise/sports 6-7 days a week\n  very: 1.9 // Very hard exercise/sports & physical job\n};\n\n// Calculate TDEE (Total Daily Energy Expenditure)\nexport const calculateTDEE = (bmr, activityLevel) => {\n  const multiplier = activityMultipliers[activityLevel] || activityMultipliers.moderate;\n  return Math.round(bmr * multiplier);\n};\n\n// Calculate macronutrient distribution\nexport const calculateMacros = (tdee, goal = 'maintain') => {\n  let proteinRatio, fatRatio, carbRatio;\n  switch (goal) {\n    case 'lose':\n      proteinRatio = 0.35; // 35% protein\n      fatRatio = 0.30; // 30% fat\n      carbRatio = 0.35; // 35% carbs\n      break;\n    case 'gain':\n      proteinRatio = 0.25; // 25% protein\n      fatRatio = 0.20; // 20% fat\n      carbRatio = 0.55; // 55% carbs\n      break;\n    default:\n      // maintain\n      proteinRatio = 0.30; // 30% protein\n      fatRatio = 0.25; // 25% fat\n      carbRatio = 0.45;\n    // 45% carbs\n  }\n  const protein = Math.round(tdee * proteinRatio / 4); // 4 calories per gram\n  const fat = Math.round(tdee * fatRatio / 9); // 9 calories per gram\n  const carbs = Math.round(tdee * carbRatio / 4); // 4 calories per gram\n\n  return {\n    protein,\n    fat,\n    carbs,\n    total: protein + fat + carbs\n  };\n};\n\n// Get activity level description\nexport const getActivityDescription = level => {\n  const descriptions = {\n    sedentary: 'Little or no exercise',\n    lightly: 'Light exercise/sports 1-3 days/week',\n    moderate: 'Moderate exercise/sports 3-5 days/week',\n    active: 'Hard exercise/sports 6-7 days/week',\n    very: 'Very hard exercise/sports & physical job'\n  };\n  return descriptions[level] || descriptions.moderate;\n};\n\n// Calculate ideal weight range\nexport const calculateIdealWeight = (height, gender) => {\n  const heightInMeters = height / 100;\n  const bmiMin = 18.5;\n  const bmiMax = 24.9;\n  const minWeight = Math.round(bmiMin * heightInMeters * heightInMeters);\n  const maxWeight = Math.round(bmiMax * heightInMeters * heightInMeters);\n  return {\n    min: minWeight,\n    max: maxWeight\n  };\n};","map":{"version":3,"names":["calculateBMI","weight","height","heightInMeters","bmi","Math","round","getBMICategory","category","color","calculateBMR","age","gender","bmr","activityMultipliers","sedentary","lightly","moderate","active","very","calculateTDEE","activityLevel","multiplier","calculateMacros","tdee","goal","proteinRatio","fatRatio","carbRatio","protein","fat","carbs","total","getActivityDescription","level","descriptions","calculateIdealWeight","bmiMin","bmiMax","minWeight","maxWeight","min","max"],"sources":["C:/Users/HP/OneDrive/Desktop/Nutrition suggestion/src/utils/nutritionCalculations.js"],"sourcesContent":["// Calculate BMI (Body Mass Index)\r\nexport const calculateBMI = (weight, height) => {\r\n  const heightInMeters = height / 100;\r\n  const bmi = weight / (heightInMeters * heightInMeters);\r\n  return Math.round(bmi * 10) / 10;\r\n};\r\n\r\n// Get BMI category\r\nexport const getBMICategory = (bmi) => {\r\n  if (bmi < 18.5) return { category: 'Underweight', color: 'text-blue-400' };\r\n  if (bmi < 25) return { category: 'Normal weight', color: 'text-green-400' };\r\n  if (bmi < 30) return { category: 'Overweight', color: 'text-yellow-400' };\r\n  return { category: 'Obese', color: 'text-red-400' };\r\n};\r\n\r\n// Calculate BMR (Basal Metabolic Rate) using Mifflin-St Jeor Equation\r\nexport const calculateBMR = (weight, height, age, gender) => {\r\n  let bmr;\r\n  if (gender === 'male') {\r\n    bmr = 10 * weight + 6.25 * height - 5 * age + 5;\r\n  } else {\r\n    bmr = 10 * weight + 6.25 * height - 5 * age - 161;\r\n  }\r\n  return Math.round(bmr);\r\n};\r\n\r\n// Activity level multipliers\r\nconst activityMultipliers = {\r\n  sedentary: 1.2,      // Little or no exercise\r\n  lightly: 1.375,      // Light exercise/sports 1-3 days/week\r\n  moderate: 1.55,      // Moderate exercise/sports 3-5 days/week\r\n  active: 1.725,       // Hard exercise/sports 6-7 days a week\r\n  very: 1.9,           // Very hard exercise/sports & physical job\r\n};\r\n\r\n// Calculate TDEE (Total Daily Energy Expenditure)\r\nexport const calculateTDEE = (bmr, activityLevel) => {\r\n  const multiplier = activityMultipliers[activityLevel] || activityMultipliers.moderate;\r\n  return Math.round(bmr * multiplier);\r\n};\r\n\r\n// Calculate macronutrient distribution\r\nexport const calculateMacros = (tdee, goal = 'maintain') => {\r\n  let proteinRatio, fatRatio, carbRatio;\r\n  \r\n  switch (goal) {\r\n    case 'lose':\r\n      proteinRatio = 0.35; // 35% protein\r\n      fatRatio = 0.30;     // 30% fat\r\n      carbRatio = 0.35;    // 35% carbs\r\n      break;\r\n    case 'gain':\r\n      proteinRatio = 0.25; // 25% protein\r\n      fatRatio = 0.20;     // 20% fat\r\n      carbRatio = 0.55;    // 55% carbs\r\n      break;\r\n    default: // maintain\r\n      proteinRatio = 0.30; // 30% protein\r\n      fatRatio = 0.25;     // 25% fat\r\n      carbRatio = 0.45;    // 45% carbs\r\n  }\r\n\r\n  const protein = Math.round((tdee * proteinRatio) / 4); // 4 calories per gram\r\n  const fat = Math.round((tdee * fatRatio) / 9);         // 9 calories per gram\r\n  const carbs = Math.round((tdee * carbRatio) / 4);      // 4 calories per gram\r\n\r\n  return {\r\n    protein,\r\n    fat,\r\n    carbs,\r\n    total: protein + fat + carbs,\r\n  };\r\n};\r\n\r\n// Get activity level description\r\nexport const getActivityDescription = (level) => {\r\n  const descriptions = {\r\n    sedentary: 'Little or no exercise',\r\n    lightly: 'Light exercise/sports 1-3 days/week',\r\n    moderate: 'Moderate exercise/sports 3-5 days/week',\r\n    active: 'Hard exercise/sports 6-7 days/week',\r\n    very: 'Very hard exercise/sports & physical job',\r\n  };\r\n  return descriptions[level] || descriptions.moderate;\r\n};\r\n\r\n// Calculate ideal weight range\r\nexport const calculateIdealWeight = (height, gender) => {\r\n  const heightInMeters = height / 100;\r\n  const bmiMin = 18.5;\r\n  const bmiMax = 24.9;\r\n  \r\n  const minWeight = Math.round(bmiMin * heightInMeters * heightInMeters);\r\n  const maxWeight = Math.round(bmiMax * heightInMeters * heightInMeters);\r\n  \r\n  return { min: minWeight, max: maxWeight };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}